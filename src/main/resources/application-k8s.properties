# =============================================================================
# API GATEWAY KUBERNETES ENVIRONMENT CONFIGURATION
# =============================================================================

# Application Information
spring.application.name=api-gateway
spring.application.description=API Gateway Service (Kubernetes)

# Server Configuration
server.port=${SERVER_PORT:8080}
server.servlet.context-path=/

# =============================================================================
# EUREKA SERVICE DISCOVERY (Kubernetes)
# =============================================================================

# Eureka Configuration for Kubernetes
eureka.client.serviceUrl.defaultZone=${EUREKA_URL:http://eureka:password@discovery-server:8761/eureka}
eureka.instance.prefer-ip-address=true
eureka.instance.hostname=${HOSTNAME:api-gateway}
eureka.instance.instance-id=${spring.application.name}:${server.port}
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true
eureka.client.healthcheck.enabled=true

# Kubernetes-specific Eureka settings
eureka.instance.lease-renewal-interval-in-seconds=10
eureka.instance.lease-expiration-duration-in-seconds=30
eureka.client.registry-fetch-interval-seconds=10
eureka.instance.metadata-map.zone=${K8S_ZONE:default}
eureka.instance.metadata-map.cluster=${K8S_CLUSTER:default}

# =============================================================================
# SPRING CLOUD GATEWAY ROUTES (Kubernetes)
# =============================================================================

# Route Configuration for Kubernetes
spring.cloud.gateway.routes[0].id=appointment-service
spring.cloud.gateway.routes[0].uri=lb://appointment-service
spring.cloud.gateway.routes[0].predicates[0]=Path=/api/appointment/**

spring.cloud.gateway.routes[1].id=saloon-service
spring.cloud.gateway.routes[1].uri=lb://saloon-service
spring.cloud.gateway.routes[1].predicates[0]=Path=/api/saloon/**

spring.cloud.gateway.routes[2].id=discovery-server
spring.cloud.gateway.routes[2].uri=http://discovery-server:8761
spring.cloud.gateway.routes[2].predicates[0]=Path=/eureka/web
spring.cloud.gateway.routes[2].filters[0]=SetPath=/

spring.cloud.gateway.routes[3].id=discovery-server-static
spring.cloud.gateway.routes[3].uri=http://discovery-server:8761
spring.cloud.gateway.routes[3].predicates[0]=Path=/eureka/**

spring.cloud.gateway.routes[4].id=identity-service
spring.cloud.gateway.routes[4].uri=lb://identity-service
spring.cloud.gateway.routes[4].predicates[0]=Path=/auth/**
spring.cloud.gateway.routes[4].filters=AuthenticationFilter

# Swagger Documentation Routes
spring.cloud.gateway.routes[5].id=booking-service-swagger
spring.cloud.gateway.routes[5].uri=lb://booking-service
spring.cloud.gateway.routes[5].predicates[0]=Path=/booking-service/v3/api-docs
spring.cloud.gateway.routes[5].filters[0]=RewritePath=/booking-service/v3/api-docs, /v3/api-docs

spring.cloud.gateway.routes[6].id=saloon-service-swagger
spring.cloud.gateway.routes[6].uri=lb://saloon-service
spring.cloud.gateway.routes[6].predicates[0]=Path=/saloon-service/v3/api-docs
spring.cloud.gateway.routes[6].filters[0]=RewritePath=/saloon-service/v3/api-docs, /v3/api-docs

spring.cloud.gateway.routes[7].id=identity-service-swagger
spring.cloud.gateway.routes[7].uri=lb://identity-service
spring.cloud.gateway.routes[7].predicates[0]=Path=/identity-service/v3/api-docs
spring.cloud.gateway.routes[7].filters[0]=RewritePath=/identity-service/v3/api-docs, /v3/api-docs

spring.cloud.gateway.routes[8].id=notification-service-swagger
spring.cloud.gateway.routes[8].uri=lb://notification-service
spring.cloud.gateway.routes[8].predicates[0]=Path=/notification-service/v3/api-docs
spring.cloud.gateway.routes[8].filters[0]=RewritePath=/notification-service/v3/api-docs, /v3/api-docs

# =============================================================================
# LOGGING CONFIGURATION (Kubernetes)
# =============================================================================

# Logging Levels for Kubernetes
logging.level.root=${LOG_LEVEL_ROOT:INFO}
logging.level.org.springframework.cloud.gateway=${LOG_LEVEL_GATEWAY:INFO}
logging.level.org.springframework.cloud.gateway.route.RouteDefinitionLocator=${LOG_LEVEL_ROUTES:INFO}

# Kubernetes-friendly logging pattern (JSON for log aggregation)
logging.pattern.console={"timestamp":"%d{yyyy-MM-dd HH:mm:ss.SSS}","level":"%level","thread":"%thread","logger":"%logger{36}","message":"%msg%n","pod":"${HOSTNAME}","namespace":"${K8S_NAMESPACE:default}"}
logging.pattern.file={"timestamp":"%d{yyyy-MM-dd HH:mm:ss.SSS}","level":"%level","thread":"%thread","logger":"%logger{36}","message":"%msg%n","pod":"${HOSTNAME}","namespace":"${K8S_NAMESPACE:default}"}

# =============================================================================
# ACTUATOR CONFIGURATION (Kubernetes)
# =============================================================================

# Management Endpoints for Kubernetes
management.endpoints.web.exposure.include=health,info,metrics,prometheus,gateway,env,configprops,loggers
management.endpoint.health.show-details=${HEALTH_SHOW_DETAILS:always}
management.endpoint.health.show-components=always
management.endpoints.web.base-path=/actuator
management.endpoint.health.probes.enabled=true
management.health.livenessstate.enabled=true
management.health.readinessstate.enabled=true

# Kubernetes Health Check Endpoints
management.health.livenessstate.health-indicator.livenessstate.enabled=true
management.health.readinessstate.health-indicator.readinessstate.enabled=true

# Metrics Configuration for Kubernetes
management.metrics.export.prometheus.enabled=true
management.metrics.tags.application=${spring.application.name}
management.metrics.tags.environment=kubernetes
management.metrics.tags.pod=${HOSTNAME}
management.metrics.tags.namespace=${K8S_NAMESPACE:default}

# =============================================================================
# OPENAPI/SWAGGER CONFIGURATION
# =============================================================================

# Swagger UI Configuration
springdoc.swagger-ui.urls[0].name=Booking Service
springdoc.swagger-ui.urls[0].url=/booking-service/v3/api-docs

springdoc.swagger-ui.urls[1].name=Saloon Service
springdoc.swagger-ui.urls[1].url=/saloon-service/v3/api-docs

springdoc.swagger-ui.urls[2].name=Identity Service
springdoc.swagger-ui.urls[2].url=/identity-service/v3/api-docs

springdoc.swagger-ui.urls[3].name=Notification Service
springdoc.swagger-ui.urls[3].url=/notification-service/v3/api-docs

# OpenAPI Documentation (Disabled in Kubernetes by default)
springdoc.api-docs.path=/v3/api-docs
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.api-docs.enabled=${SWAGGER_ENABLED:false}
springdoc.swagger-ui.enabled=${SWAGGER_UI_ENABLED:false}

# =============================================================================
# JWT CONFIGURATION
# =============================================================================

jwt.secret=${JWT_SECRET:U2dWa1lwMzczNjc5NzkyRjQyRjQ1Mjg0ODJCNGRiNjI1MTY1NTQ2ODU3NmQ1YTcxNDc0Nw==}

# =============================================================================
# TRACING & MONITORING (Kubernetes)
# =============================================================================

# Distributed Tracing for Kubernetes
spring.sleuth.enabled=${SLEUTH_ENABLED:true}
spring.zipkin.enabled=${ZIPKIN_ENABLED:true}
spring.zipkin.base-url=${ZIPKIN_URL:http://zipkin:9411}
management.tracing.enabled=${TRACING_ENABLED:true}
management.tracing.sampling.probability=${TRACING_SAMPLING_PROBABILITY:1.0}

# =============================================================================
# PERFORMANCE & RESILIENCE (Kubernetes)
# =============================================================================

# Connection Timeouts for Kubernetes
spring.cloud.gateway.httpclient.connect-timeout=${GATEWAY_CONNECT_TIMEOUT:5000}
spring.cloud.gateway.httpclient.response-timeout=${GATEWAY_RESPONSE_TIMEOUT:30s}

# Circuit Breaker Configuration
spring.cloud.gateway.filter.circuit-breaker.enabled=${CIRCUIT_BREAKER_ENABLED:true}

# Rate Limiting Configuration
spring.cloud.gateway.default-filters[0]=RequestRateLimiter=20, 1, 1s

# =============================================================================
# SECURITY CONFIGURATION (Kubernetes)
# =============================================================================

# CORS Configuration for Kubernetes
spring.web.cors.allowed-origins=${CORS_ALLOWED_ORIGINS:*}
spring.web.cors.allowed-methods=${CORS_ALLOWED_METHODS:GET,POST,PUT,DELETE,OPTIONS}
spring.web.cors.allowed-headers=${CORS_ALLOWED_HEADERS:*}
spring.web.cors.allow-credentials=${CORS_ALLOW_CREDENTIALS:true}

# =============================================================================
# FEATURE FLAGS (Kubernetes)
# =============================================================================

# Feature Toggles for Kubernetes Environment
app.features.audit-logging=${AUDIT_LOGGING_ENABLED:true}
app.features.rate-limiting=${RATE_LIMITING_ENABLED:true}
app.features.circuit-breaker=${CIRCUIT_BREAKER_ENABLED:true}
app.features.gateway-monitoring=${GATEWAY_MONITORING_ENABLED:true}
app.features.kubernetes-health-checks=${K8S_HEALTH_CHECKS:true}
app.features.metrics-export=${METRICS_EXPORT_ENABLED:true}
app.features.distributed-tracing=${DISTRIBUTED_TRACING_ENABLED:true}

# =============================================================================
# KUBERNETES SPECIFIC CONFIGURATION
# =============================================================================

# Kubernetes Service Discovery
spring.cloud.kubernetes.enabled=${K8S_DISCOVERY_ENABLED:false}
spring.cloud.kubernetes.config.enabled=${K8S_CONFIG_ENABLED:false}
spring.cloud.kubernetes.secrets.enabled=${K8S_SECRETS_ENABLED:false}

# Graceful Shutdown
server.shutdown=graceful
spring.lifecycle.timeout-per-shutdown-phase=${GRACEFUL_SHUTDOWN_TIMEOUT:30s} 