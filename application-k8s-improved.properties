# =============================================================================
# KUBERNETES ENVIRONMENT CONFIGURATION (PRODUCTION-READY)
# =============================================================================

# Application Information
spring.application.name=${SPRING_APPLICATION_NAME:identity-service}
spring.application.description=Identity and Authentication Service (Kubernetes)

# Server Configuration
server.port=${SERVER_PORT:8080}
server.servlet.context-path=/
server.shutdown=graceful
spring.lifecycle.timeout-per-shutdown-phase=${GRACEFUL_SHUTDOWN_TIMEOUT:30s}

# =============================================================================
# EUREKA SERVICE DISCOVERY (Kubernetes)
# =============================================================================
eureka.client.serviceUrl.defaultZone=${EUREKA_URL:http://${EUREKA_USERNAME}:${EUREKA_PASSWORD}@${EUREKA_SERVICE_NAME:discovery-server}.${EUREKA_NAMESPACE:default}.svc.cluster.local:${EUREKA_PORT:8761}/eureka}
eureka.instance.prefer-ip-address=false
eureka.instance.hostname=${HOSTNAME:identity-service}.${K8S_NAMESPACE:default}.svc.cluster.local
eureka.instance.instance-id=${spring.application.name}:${HOSTNAME}:${server.port}
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true
eureka.client.healthcheck.enabled=true

# Kubernetes-optimized Eureka settings
eureka.instance.lease-renewal-interval-in-seconds=10
eureka.instance.lease-expiration-duration-in-seconds=30
eureka.client.registry-fetch-interval-seconds=10
eureka.instance.metadata-map.zone=${K8S_ZONE:default}
eureka.instance.metadata-map.cluster=${K8S_CLUSTER:default}
eureka.instance.metadata-map.management.port=${management.server.port:${server.port}}

# =============================================================================
# DATABASE CONFIGURATION (Kubernetes)
# =============================================================================
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=${DATABASE_URL:jdbc:mysql://${DB_SERVICE_NAME:mysql-service}.${DB_NAMESPACE:default}.svc.cluster.local:${DB_PORT:3306}/${DB_NAME:saloon_service}?useSSL=${DB_USE_SSL:true}&allowPublicKeyRetrieval=true&serverTimezone=UTC&createDatabaseIfNotExist=false}
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}

# Production-optimized Connection Pool (HikariCP)
spring.datasource.hikari.maximum-pool-size=${DB_MAX_POOL_SIZE:20}
spring.datasource.hikari.minimum-idle=${DB_MIN_IDLE:5}
spring.datasource.hikari.connection-timeout=${DB_CONNECTION_TIMEOUT:30000}
spring.datasource.hikari.idle-timeout=${DB_IDLE_TIMEOUT:600000}
spring.datasource.hikari.max-lifetime=${DB_MAX_LIFETIME:1800000}
spring.datasource.hikari.leak-detection-threshold=${DB_LEAK_DETECTION:60000}
spring.datasource.hikari.validation-timeout=${DB_VALIDATION_TIMEOUT:5000}
spring.datasource.hikari.connection-test-query=SELECT 1

# JPA/Hibernate Configuration (Production)
spring.jpa.hibernate.ddl-auto=${JPA_DDL_AUTO:validate}
spring.jpa.show-sql=${JPA_SHOW_SQL:false}
spring.jpa.properties.hibernate.format_sql=${JPA_FORMAT_SQL:false}
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
spring.jpa.properties.hibernate.jdbc.batch_size=${JPA_BATCH_SIZE:30}
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true
spring.jpa.properties.hibernate.jdbc.batch_versioned_data=true
spring.jpa.properties.hibernate.generate_statistics=${JPA_GENERATE_STATS:false}

# =============================================================================
# LOGGING CONFIGURATION (Kubernetes)
# =============================================================================
logging.level.root=${LOG_LEVEL_ROOT:INFO}
logging.level.com.baber.identityservice=${LOG_LEVEL_APP:INFO}
logging.level.org.hibernate.SQL=${LOG_LEVEL_SQL:WARN}
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=${LOG_LEVEL_SQL_BINDER:WARN}

# Kubernetes-optimized JSON logging for log aggregation
logging.pattern.console={"timestamp":"%d{yyyy-MM-dd'T'HH:mm:ss.SSSXXX}","level":"%level","thread":"%thread","logger":"%logger{36}","message":"%replace(%msg){'\"','\\\\"'}%n","traceId":"%X{traceId:-}","spanId":"%X{spanId:-}","pod":"${HOSTNAME:-unknown}","namespace":"${K8S_NAMESPACE:-default}","service":"${spring.application.name}"}
logging.pattern.file=${logging.pattern.console}

# =============================================================================
# ACTUATOR CONFIGURATION (Kubernetes)
# =============================================================================
management.endpoints.web.exposure.include=health,info,metrics,prometheus,env
management.endpoint.health.show-details=${HEALTH_SHOW_DETAILS:when-authorized}
management.endpoint.health.show-components=always
management.endpoints.web.base-path=/actuator
management.server.port=${MANAGEMENT_PORT:${server.port}}

# Kubernetes Health Probes
management.endpoint.health.probes.enabled=true
management.health.livenessstate.enabled=true
management.health.readinessstate.enabled=true
management.endpoint.health.group.liveness.include=livenessState,diskSpace
management.endpoint.health.group.readiness.include=readinessState,db,eureka

# Metrics Configuration for Kubernetes
management.metrics.export.prometheus.enabled=true
management.metrics.tags.application=${spring.application.name}
management.metrics.tags.environment=kubernetes
management.metrics.tags.pod=${HOSTNAME:-unknown}
management.metrics.tags.namespace=${K8S_NAMESPACE:-default}
management.metrics.tags.version=${spring.application.version:unknown}

# =============================================================================
# JWT CONFIGURATION (Kubernetes Secrets)
# =============================================================================
jwt.secret=${JWT_SECRET}
jwt.expiration=${JWT_EXPIRATION:86400000}
jwt.refresh-expiration=${JWT_REFRESH_EXPIRATION:604800000}
jwt.issuer=${JWT_ISSUER:identity-service}

# =============================================================================
# OPENAPI/SWAGGER CONFIGURATION (Disabled in Production)
# =============================================================================
springdoc.api-docs.path=/v3/api-docs
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.api-docs.enabled=${SWAGGER_ENABLED:false}
springdoc.swagger-ui.enabled=${SWAGGER_UI_ENABLED:false}

# =============================================================================
# TRACING & MONITORING (Kubernetes)
# =============================================================================
spring.sleuth.enabled=${SLEUTH_ENABLED:true}
spring.zipkin.enabled=${ZIPKIN_ENABLED:true}
spring.zipkin.base-url=${ZIPKIN_URL:http://zipkin.monitoring.svc.cluster.local:9411}
management.tracing.enabled=${TRACING_ENABLED:true}
management.tracing.sampling.probability=${TRACING_SAMPLING_PROBABILITY:0.1}

# =============================================================================
# PERFORMANCE & RESILIENCE (Kubernetes)
# =============================================================================
# Tomcat Configuration
server.tomcat.connection-timeout=${TOMCAT_CONNECTION_TIMEOUT:20000}
server.tomcat.max-threads=${TOMCAT_MAX_THREADS:200}
server.tomcat.accept-count=${TOMCAT_ACCEPT_COUNT:100}
server.tomcat.max-connections=${TOMCAT_MAX_CONNECTIONS:8192}

# Circuit Breaker Configuration
resilience4j.circuitbreaker.instances.default.sliding-window-size=${CIRCUIT_BREAKER_WINDOW_SIZE:10}
resilience4j.circuitbreaker.instances.default.failure-rate-threshold=${CIRCUIT_BREAKER_FAILURE_RATE:50}
resilience4j.circuitbreaker.instances.default.wait-duration-in-open-state=${CIRCUIT_BREAKER_WAIT_DURATION:60s}
resilience4j.circuitbreaker.instances.default.permitted-number-of-calls-in-half-open-state=3

# Retry Configuration
resilience4j.retry.instances.default.max-attempts=${RETRY_MAX_ATTEMPTS:3}
resilience4j.retry.instances.default.wait-duration=${RETRY_WAIT_DURATION:1s}

# =============================================================================
# CACHE CONFIGURATION (Kubernetes)
# =============================================================================
spring.cache.type=${CACHE_TYPE:redis}
spring.redis.host=${REDIS_SERVICE_NAME:redis-service}.${REDIS_NAMESPACE:default}.svc.cluster.local
spring.redis.port=${REDIS_PORT:6379}
spring.redis.password=${REDIS_PASSWORD:}
spring.redis.timeout=${REDIS_TIMEOUT:2000ms}
spring.redis.lettuce.pool.max-active=${REDIS_MAX_ACTIVE:10}
spring.redis.lettuce.pool.max-idle=${REDIS_MAX_IDLE:10}
spring.redis.lettuce.pool.min-idle=${REDIS_MIN_IDLE:2}

# =============================================================================
# SECURITY CONFIGURATION (Kubernetes)
# =============================================================================
spring.web.cors.allowed-origins=${CORS_ALLOWED_ORIGINS:https://*.yourdomain.com}
spring.web.cors.allowed-methods=${CORS_ALLOWED_METHODS:GET,POST,PUT,DELETE,OPTIONS}
spring.web.cors.allowed-headers=${CORS_ALLOWED_HEADERS:Authorization,Content-Type,X-Requested-With}
spring.web.cors.allow-credentials=${CORS_ALLOW_CREDENTIALS:true}
spring.web.cors.max-age=${CORS_MAX_AGE:3600}

# =============================================================================
# KUBERNETES NATIVE FEATURES
# =============================================================================
# Kubernetes Service Discovery (Alternative to Eureka)
spring.cloud.kubernetes.enabled=${K8S_DISCOVERY_ENABLED:false}
spring.cloud.kubernetes.config.enabled=${K8S_CONFIG_ENABLED:true}
spring.cloud.kubernetes.secrets.enabled=${K8S_SECRETS_ENABLED:true}
spring.cloud.kubernetes.reload.enabled=${K8S_RELOAD_ENABLED:true}

# =============================================================================
# FEATURE FLAGS (Kubernetes)
# =============================================================================
app.features.audit-logging=${AUDIT_LOGGING_ENABLED:true}
app.features.rate-limiting=${RATE_LIMITING_ENABLED:true}
app.features.circuit-breaker=${CIRCUIT_BREAKER_ENABLED:true}
app.features.kubernetes-health-checks=${K8S_HEALTH_CHECKS:true}
app.features.metrics-export=${METRICS_EXPORT_ENABLED:true}
app.features.distributed-tracing=${DISTRIBUTED_TRACING_ENABLED:true}
app.features.cache-enabled=${CACHE_ENABLED:true}