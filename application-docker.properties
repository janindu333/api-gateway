# =============================================================================
# DOCKER ENVIRONMENT CONFIGURATION
# =============================================================================

# Application Information
spring.application.name=${SPRING_APPLICATION_NAME:identity-service}
spring.application.description=Identity and Authentication Service (Docker)

# Server Configuration
server.port=${SERVER_PORT:8080}
server.servlet.context-path=/
server.shutdown=graceful
spring.lifecycle.timeout-per-shutdown-phase=${GRACEFUL_SHUTDOWN_TIMEOUT:30s}

# =============================================================================
# EUREKA SERVICE DISCOVERY (Docker)
# =============================================================================
eureka.client.serviceUrl.defaultZone=${EUREKA_URL:http://${EUREKA_USERNAME:eureka}:${EUREKA_PASSWORD:password}@${EUREKA_HOST:discovery-server}:${EUREKA_PORT:8761}/eureka}
eureka.instance.prefer-ip-address=true
eureka.instance.hostname=${HOSTNAME:identity-service}
eureka.instance.instance-id=${spring.application.name}:${server.port}
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true
eureka.client.healthcheck.enabled=true

# Docker-specific Eureka settings
eureka.instance.lease-renewal-interval-in-seconds=30
eureka.instance.lease-expiration-duration-in-seconds=90
eureka.client.registry-fetch-interval-seconds=30

# =============================================================================
# DATABASE CONFIGURATION (Docker)
# =============================================================================
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=${DATABASE_URL:jdbc:mysql://${DB_HOST:mysql}:${DB_PORT:3306}/${DB_NAME:saloon_service}?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC&createDatabaseIfNotExist=true}
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}

# Connection Pool Configuration (HikariCP)
spring.datasource.hikari.maximum-pool-size=${DB_MAX_POOL_SIZE:10}
spring.datasource.hikari.minimum-idle=${DB_MIN_IDLE:2}
spring.datasource.hikari.connection-timeout=${DB_CONNECTION_TIMEOUT:20000}
spring.datasource.hikari.idle-timeout=${DB_IDLE_TIMEOUT:300000}
spring.datasource.hikari.max-lifetime=${DB_MAX_LIFETIME:1200000}
spring.datasource.hikari.leak-detection-threshold=${DB_LEAK_DETECTION:60000}

# JPA/Hibernate Configuration
spring.jpa.hibernate.ddl-auto=${JPA_DDL_AUTO:validate}
spring.jpa.show-sql=${JPA_SHOW_SQL:false}
spring.jpa.properties.hibernate.format_sql=${JPA_FORMAT_SQL:false}
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
spring.jpa.properties.hibernate.jdbc.batch_size=25
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true

# =============================================================================
# LOGGING CONFIGURATION (Docker)
# =============================================================================
logging.level.root=${LOG_LEVEL_ROOT:INFO}
logging.level.com.baber.identityservice=${LOG_LEVEL_APP:INFO}
logging.level.org.hibernate.SQL=${LOG_LEVEL_SQL:WARN}
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=${LOG_LEVEL_SQL_BINDER:WARN}

# Docker-friendly logging pattern
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{traceId:-},%X{spanId:-}] %logger{36} - %msg%n
logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{traceId:-},%X{spanId:-}] %logger{36} - %msg%n

# =============================================================================
# ACTUATOR CONFIGURATION (Docker)
# =============================================================================
management.endpoints.web.exposure.include=health,info,metrics,prometheus
management.endpoint.health.show-details=${HEALTH_SHOW_DETAILS:when-authorized}
management.endpoint.health.show-components=always
management.endpoints.web.base-path=/actuator
management.endpoint.health.probes.enabled=true
management.health.livenessstate.enabled=true
management.health.readinessstate.enabled=true

# Metrics Configuration
management.metrics.export.prometheus.enabled=true
management.metrics.tags.application=${spring.application.name}
management.metrics.tags.environment=docker

# =============================================================================
# JWT CONFIGURATION
# =============================================================================
jwt.secret=${JWT_SECRET}
jwt.expiration=${JWT_EXPIRATION:86400000}
jwt.refresh-expiration=${JWT_REFRESH_EXPIRATION:604800000}

# =============================================================================
# OPENAPI/SWAGGER CONFIGURATION
# =============================================================================
springdoc.api-docs.path=/v3/api-docs
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.api-docs.enabled=${SWAGGER_ENABLED:true}
springdoc.swagger-ui.enabled=${SWAGGER_UI_ENABLED:true}

# =============================================================================
# TRACING & MONITORING (Docker)
# =============================================================================
spring.sleuth.enabled=${SLEUTH_ENABLED:false}
spring.zipkin.enabled=${ZIPKIN_ENABLED:false}
spring.zipkin.base-url=${ZIPKIN_URL:http://zipkin:9411}
management.tracing.enabled=${TRACING_ENABLED:false}
management.tracing.sampling.probability=${TRACING_SAMPLING_PROBABILITY:0.1}

# =============================================================================
# SECURITY CONFIGURATION
# =============================================================================
spring.web.cors.allowed-origins=${CORS_ALLOWED_ORIGINS:http://localhost:3000,http://localhost:8080}
spring.web.cors.allowed-methods=${CORS_ALLOWED_METHODS:GET,POST,PUT,DELETE,OPTIONS}
spring.web.cors.allowed-headers=${CORS_ALLOWED_HEADERS:*}
spring.web.cors.allow-credentials=${CORS_ALLOW_CREDENTIALS:true}

# =============================================================================
# PERFORMANCE & RESILIENCE
# =============================================================================
server.tomcat.connection-timeout=${TOMCAT_CONNECTION_TIMEOUT:20000}
server.tomcat.max-threads=${TOMCAT_MAX_THREADS:200}
server.tomcat.accept-count=${TOMCAT_ACCEPT_COUNT:100}